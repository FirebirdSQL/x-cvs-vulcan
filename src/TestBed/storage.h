/**************************************
 *  File:            .\storage.h
 *  Generated by:    c:\ocs\cppddl\cppddl -I. -I..\Workbench .\storage.ssc 
 *  Version:         T1.0D Beta Version
 *  Date:            Mon Jul 05 13:55:04 2004
 **************************************/

#ifdef __cplusplus
extern "C" {
#endif

#ifndef OCS_ENV_VERSION
#define OCS_ENV_VERSION 1

typedef void *OCS_SCHEMA;
typedef struct ocs_env {
    int    version;
    void   *io_handle;
    void   *mem_handle;
    void   *ocs_handle;
    int    (*read)(OCS_SCHEMA,struct ocs_env*,int*,void*,...);
    int    (*write)(OCS_SCHEMA,struct ocs_env*,int,void*,...);
    int    (*get)(void* read_handle, char *data, int length, struct ocs_env*);
    int    (*put)(void* write_handle, char *data, int length, struct ocs_env*);
    void   *(*alloc)(int size, struct ocs_env *env);
    void   (*free)(void *obj, struct ocs_env *env);
    void   (*delete_fn)(struct ocs_env *env);
    void   (*error)(int number, char *text, struct ocs_env *env);
    int    (*register_object)(OCS_SCHEMA,struct ocs_env*,int,void*,void*);
    int    (*query_state)(struct ocs_env*, void*);
    int    (*set_state)(struct ocs_env*, void*, int);
    } *OCS_ENV;

#define OCS_READ(schema,env,class,object_ptr,handle) \
  (env->read) (OCS_schema_##schema(),env,class,object_ptr,handle)

#define OCS_WRITE(schema,env,class,pointer, handle) \
  (env->write) (OCS_schema_##schema(),env,OCS_##schema##_##class,pointer,handle)

#define OCS_CLASS(schema,class)   OCS_##schema##_##class

#define OCS_REGISTER(schema,env,handle,class,pointer) \
  (env->register_object) (OCS_schema_##schema(),env,ocs_##schema##_##class,pointer,handle)

extern OCS_ENV OCS_get_env();
extern OCS_ENV OCS_get_file_env();
#endif

#define OCS_schema_storage OCS_schema_storage_v1
extern void *OCS_schema_storage();

#define OCS_storage_Scripts	45
#define OCS_storage_TestEnv	44
#define OCS_storage_Script	43
#define OCS_storage_CString	42
#define OCS_storage_ApplicationObject	41
#define OCS_storage_CEditClient	40

#ifdef __cplusplus
}
#endif
