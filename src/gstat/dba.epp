/*
 *	PROGRAM:	JRD Access Method
 *	MODULE:		dba.epp
 *	DESCRIPTION:	Database analysis tool
 *
 * The contents of this file are subject to the Interbase Public
 * License Version 1.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy
 * of the License at http://www.Inprise.com/IPL.html
 *
 * Software distributed under the License is distributed on an
 * "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code was created by Inprise Corporation
 * and its predecessors. Portions created by Inprise Corporation are
 * Copyright (C) Inprise Corporation.
 *
 * All Rights Reserved.
 * Contributor(s): ______________________________________.
 *
 * 2001.08.07 Sean Leyne - Code Cleanup, removed "#ifdef READONLY_DATABASE"
 *                         conditionals, as the engine now fully supports
 *                         readonly databases.
 *
 * 2002.10.29 Sean Leyne - Removed obsolete "Netware" port
 *
 */


#include <errno.h>
#include <string.h>
//#include <fcntl.h>
#include <stdio.h>

#include "firebird.h"
#include "../jrd/common.h"
#include "../jrd/ibsetjmp.h"
#include "../jrd/jrd_time.h"
#include "../jrd/ibase.h"
#include "../jrd/ods.h"
#include "../jrd/btn.h"
#include "../jrd/svc.h"
#include "../jrd/license.h"
#include "../jrd/msg_encode.h"
#include "../jrd/gdsassert.h"
#include "../gstat/ppg_proto.h"
#include "../gstat/dbaswi.h"
#include "../jrd/gds_proto.h"
#include "../jrd/isc_f_proto.h"

#include "Configuration.h"
#include "ConfObject.h"
#include "AdminException.h"
#include "PBGen.h"
#include "JString.h"
#include "DbaData.h"
#include "DbaRelation.h"
#include "DbaFile.h"
#include "DbaIndex.h"
#include "StatusPrint.h"
#include "OSRIException.h"


#ifdef SERVICE_THREAD
#include "Service.h"
#include "../utilities/common/cmd_util_proto.h"
#endif

#include "../jrd/constants.h"
//#include "../jrd/ods_proto.h"


#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#ifdef WIN_NT
#include <io.h>
#endif

//using namespace Ods;

/* For Netware the follow DB handle and isc_status is #defined to be a  */
/* local variable on the stack in main.  This is to avoid multiple      */
/* threading problems with module level statics.                        */

DATABASE DB = STATIC "yachts.lnk";
#define DB          db_handle
#define isc_status  status_vector

//const SSHORT BUCKETS	= 5;
//#define WINDOW_SIZE	(1 << 17)

static void analyze_data(DbaData* tddba, DbaRelation*, bool);
static bool analyze_data_page(DbaData* tddba, DbaRelation*, const data_page*, bool);
static ULONG analyze_fragments(DbaData* tddba, const DbaRelation*, const rhdf*);
static ULONG analyze_versions(DbaData* tddba, DbaRelation*, const rhdf*);
static void analyze_index(DbaData* tddba, DbaRelation*, DbaIndex*);
static JString trim(const char *string);
static JString resolveDatabase(const char *name);

#if (defined WIN_NT)
static void db_error(DbaData* tddba, SLONG);
#else
static void db_error(DbaData* tddba, int);
#endif

static DbaFile* db_open(DbaData* tddba, const char*);
//static const pag* db_read(DbaData* tddba, SLONG);

static void move(const SCHAR*, SCHAR*, SSHORT);
static void print_distribution(DbaData* tddba, const SCHAR*, const SLONG*);
static void dba_error(DbaData* tddba, USHORT, const TEXT*, const TEXT*, const TEXT*,
	const TEXT*, const TEXT*);
static void dba_print(DbaData* tddba, USHORT, const TEXT*, const TEXT*, const TEXT*,
	const TEXT*, const TEXT*);

#include "../jrd/db_alias.h"
#include "../jrd/svc.h"
#include "../jrd/svc_proto.h"

#ifdef SERVICE_THREAD
#include <fcntl.h>

#if (defined WIN_NT)
#include <share.h>
#endif

//#include "../jrd/jrd_pwd.h"
//#include "../utilities/gstat/ppg_proto.h"

#define FPRINTF		SVC_fprintf

#endif // SERVICE_THREAD

#ifndef FPRINTF
#define FPRINTF 	fprintf
#endif

/* threading declarations for thread data */

void inline dba_exit(int code, DbaData* tddba)
{
	tddba->exit_code = code;
	// Throw this kind of exception, because gstat uses status vector (and stuff_exception) to
    // handle errors
	firebird::status_exception::raise(1);
}

//const USHORT GSTAT_MSG_FAC	= 21;

#if defined (WIN95)
#define TRANSLATE_CP(a) if (!fAnsiCP) CharToOem(a, a)
#else
#define TRANSLATE_CP(a)
#endif

static int dba_main(int argc, char** argv, Service *service);



#ifdef SERVICE_THREAD
THREAD_ENTRY_DECLARE main_gstat(THREAD_ENTRY_PARAM arg)
{
	Service *service = (Service*) arg;
	ISC_STATUS* status = tddba->dba_service_blk->svc_status;
	status[0] = isc_arg_gds;
	status[1] = 0;
	
	try
		{
		service->svc_started();
		dba_main(service->svc_argc, service->svc_argv, service);
		}
	catch (OSRIException& exception)
		{
		exception.copy(status);
		}

	SVC_finish(service, SVC_finished);

	return status[1];
}
#else
int CLIB_ROUTINE main(int argc, char** argv)
{
	try
		{
		dba_main(argc, argv, NULL);
		}
	catch (OSRIException& exception)
		{
		const ISC_STATUS* vector = exception.statusVector;
		TEXT s[1024];
		
		if (fb_interpret(s, sizeof(s), &vector))
			{
			FPRINTF(stdout, "%s\n", s);
			s[0] = '-';
			
			while (fb_interpret(s + 1, sizeof(s) - 1, &vector)) 
				FPRINTF(stdout, "%s\n", s);
			}
		}
}
#endif

int dba_main(int argc, char** argv, Service *service)
{
/**************************************
 *
 *		d b a _ m a i n
 *
 **************************************
 *
 * Functional description
 *	Gather information from system relations to do analysis
 *	of a database.
 *
 **************************************/
	SCHAR temp[1024];
	bool sw_system = false;
	bool sw_data = false;
	bool sw_index = false;
	bool sw_version = false;
	bool sw_header = false;
	bool sw_record = false;
	bool sw_relation = false;
	bool sw_nocreation = false;
	isc_db_handle db_handle = 0;
	UCHAR buf[256];
	char pass_buff[128], user_buff[128], *password = pass_buff, *username = user_buff;

	DbaData thd_context, *tddba = &thd_context;
	ISC_STATUS* status_vector = NULL;

	try 
		{

#ifdef SERVICE_THREAD
		Service* sw_outfile = tddba->sw_outfile = service;
#else
		FILE* sw_outfile = tddba->sw_outfile = stdout;
#endif

#if defined (WIN95) && !defined (SERVICE_THREAD)
		bool fAnsiCP = false;
#endif

		/* Perform some special handling when run as an Interbase service.  The
		   first switch can be "-svc" (lower case!) or it can be "-svc_re" followed
		   by 3 file descriptors to use in re-directing stdin, stdout, and stderr. */
	   
		tddba->dba_status = tddba->dba_status_vector;
		status_vector = tddba->dba_status;

		bool called_as_service = false;

		if (argc > 1 && !strcmp(argv[1], "-svc")) 
			{
			called_as_service = true;
			argv++;
			argc--;
			}
			
#ifdef SERVICE_THREAD
		else if (!strcmp(argv[1], "-svc_thd")) 
			{
			called_as_service = true;
			tddba->dba_service_blk = service;
			tddba->dba_status = service->svc_status;
			argv++;
			argc--;
			}
#endif
		else if (argc > 4 && !strcmp(argv[1], "-svc_re")) 
			{
			called_as_service = true;
			long redir_in = atol(argv[2]);
			long redir_out = atol(argv[3]);
			long redir_err = atol(argv[4]);
#ifdef WIN_NT
#if defined (WIN95) && !defined (SERVICE_THREAD)
			fAnsiCP = true;
#endif
			redir_in = _open_osfhandle(redir_in, 0);
			redir_out = _open_osfhandle(redir_out, 0);
			redir_err = _open_osfhandle(redir_err, 0);
#endif

			if (redir_in != 0)
				if (dup2((int) redir_in, 0))
					close((int) redir_in);
					
			if (redir_out != 1)
				if (dup2((int) redir_out, 1))
					close((int) redir_out);
					
			if (redir_err != 2)
				if (dup2((int) redir_err, 2))
					close((int) redir_err);
					
			argv += 4;
			argc -= 4;
			}
			
		const char* name = NULL;
		MOVE_CLEAR(user_buff, sizeof(user_buff));
		MOVE_CLEAR(pass_buff, sizeof(pass_buff));
		const TEXT* const* const end = argv + argc;
		++argv;
		
		while (argv < end) 
			{
			const TEXT* str = *argv++;
			
			if (*str == '-') 
				{
				if (!str[1])
					str = "-*NONE*";
					
				in_sw_tab_t* in_sw_tab;
				const TEXT* q;
				
				for (in_sw_tab = dba_in_sw_table; q = in_sw_tab->in_sw_name; in_sw_tab++)
					{
					TEXT c;
					
					for (const TEXT* p = str + 1; c = *p++;) 
						if (UPPER(c) != *q++)
							break;

					if (!c)
						break;
					}
					
				in_sw_tab->in_sw_state = TRUE;
				
				switch (in_sw_tab->in_sw)
					{
					case 0:
						dba_print(tddba, 20, str + 1, 0, 0, 0, 0);	/* msg 20: unknown switch "%s" */
						dba_print(tddba, 21, 0, 0, 0, 0, 0);	/* msg 21: Available switches: */
						
						for (in_sw_tab = dba_in_sw_table; in_sw_tab->in_sw; in_sw_tab++)
							if (in_sw_tab->in_sw_msg)
								dba_print(tddba, in_sw_tab->in_sw_msg, 0, 0, 0, 0, 0);
						
						throw OSRIException(GSTAT_CODE(1), 0);

#ifdef SERVICE_THREAD
						CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
												GSTAT_MSG_FAC, 1,
												0, NULL,
												0, NULL, 0, NULL, 0, NULL, 0, NULL);
#endif
						dba_error(tddba, 1, 0, 0, 0, 0, 0);	/* msg 1: found unknown switch */
						break;
						
					case IN_SW_DBA_USERNAME:
						if (argv < end)
							strcpy((char*) username, *argv++);
						break;
						
					case IN_SW_DBA_PASSWORD:
						if (argv < end)
							strcpy((char*) password, *argv++);
							
						break;
						
					case IN_SW_DBA_SYSTEM:
						sw_system = true;
						break;
						
					case IN_SW_DBA_DATA:
						sw_data = true;
						break;
						
					case IN_SW_DBA_INDEX:
						sw_index = true;
						break;
						
					case IN_SW_DBA_VERSION:
						sw_version = true;
						break;
						
					case IN_SW_DBA_HEADER:
						sw_header = true;
						break;
						
		//			case IN_SW_DBA_LOG:
		//				sw_log = true;
		//				break;
		
					case IN_SW_DBA_DATAIDX:
						sw_index = sw_data = true;
						break;
						
					case IN_SW_DBA_RECORD:
						sw_record = true;
						break;
						
					case IN_SW_DBA_RELATION:
						sw_relation = true;
						
						while (argv < end && **argv != '-')
							{
							if (strlen(*argv) > MAX_SQL_IDENTIFIER_LEN) 
								{
								argv++;
								continue;
								}
								
							DbaRelation* relation = new DbaRelation; //(DbaRelation*) alloc(sizeof(struct DbaRelation));
							relation->rel_name = trim(*argv++);
							//strcpy(relation->rel_name, *argv++);
							//trimBlanks(relation->rel_name);
							relation->rel_id = -1;
							DbaRelation** next = &tddba->relations;
							
							while (*next) 
								next = &(*next)->rel_next;

							*next = relation;
							}
						break;
						
					case IN_SW_DBA_NOCREATION:
						sw_nocreation = true;
						break;
					}
				} // if (*str == '-')
			else 
				name = str;
			}

		if (sw_version)
			dba_print(tddba, 5, GDS_VERSION, 0, 0, 0, 0);	/* msg 5: gstat version %s */

		if (!name) 
			{
			throw OSRIException(GSTAT_CODE(2), 0);
#ifdef SERVICE_THREAD
			CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
									GSTAT_MSG_FAC, 2,
									0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
#endif
			dba_error(tddba, 2, 0, 0, 0, 0, 0);	/* msg 2: please retry, giving a database name */
			}

		if (!sw_data && !sw_index)
			sw_data = sw_index = true;

		if (sw_record && !sw_data)
			sw_data = true;

#if defined (WIN95) && !defined (SERVICE_THREAD)
		if (!fAnsiCP) 
			{
			const ULONG ulConsoleCP = GetConsoleCP();
			
			if (ulConsoleCP == GetACP())
				fAnsiCP = true;
			else if (ulConsoleCP != GetOEMCP()) 
				FPRINTF(sw_outfile,
						"WARNING: The current codepage is not supported.  Any use of any\n"
						"         extended characters may result in incorrect file names.\n");
			}
#endif

		/* Open database and go to work */
		
		/***
		Firebird::PathName temp_buf = name;
		if (ResolveDatabaseAlias(temp_buf, temp_buf)) 
			name = temp_buf.c_str();
		***/
		
		JString resolvedName = resolveDatabase(name);
		DbaFile* current = db_open(tddba, resolvedName);
		tddba->page_size = sizeof(temp);
		tddba->global_buffer = (pag*) temp;
		tddba->page_number = -1;
		const header_page* header = (const header_page*) tddba->read(0); //db_read(tddba, (SLONG) 0);

#ifdef SERVICE_THREAD
		service->svc_started();
#endif

		int majorVersion = header->hdr_ods_version & ~ODS_FIREBIRD_FLAG;
		int minorVersion = header->hdr_ods_minor;
		
		if (majorVersion > 10 << 4)
			{
			majorVersion = DECODE_ODS_MAJOR(header->hdr_ods_version);
			minorVersion = DECODE_ODS_MINOR(header->hdr_ods_version);
			}
			
		//if (!Ods::isSupported(header->hdr_ods_version, header->hdr_ods_minor))
		if (majorVersion != ODS_VERSION || 
			minorVersion > ODS_CURRENT || 
			!DECODE_FIREBIRD_FLAG(header->hdr_ods_version))
			{
			throw OSRIException(GSTAT_CODE(3), 
								isc_arg_number, ODS_VERSION,
								isc_arg_number, header->hdr_ods_version & ~ODS_FIREBIRD_FLAG,
								0);
#ifdef SERVICE_THREAD
			CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
									GSTAT_MSG_FAC, 3,
									isc_arg_number, (void*)(IPTR) ODS_VERSION,
									isc_arg_number, (void*)(IPTR) (header->hdr_ods_version & ~ODS_FIREBIRD_FLAG),
									0, NULL, 0, NULL, 0, NULL);
#endif
			dba_error(tddba, 3, (TEXT *)(IPTR) ODS_VERSION, (TEXT *)(IPTR) (header->hdr_ods_version & ~ODS_FIREBIRD_FLAG),
					0, 0, 0);		/* msg 3: Wrong ODS version, expected %d, encountered %d? */
			}

		char file_name[1024];
		
#if defined (WIN95) && !defined (SERVICE_THREAD)
		if (!fAnsiCP)
			AnsiToOem(name, file_name);
		else
#endif
			strcpy(file_name, name);

		dba_print(tddba, 6, file_name, 0, 0, 0, 0);	/* msg 6: \nDatabase \"%s\"\n */

		tddba->page_size = header->hdr_page_size;
		tddba->buffer1 = (pag*) new UCHAR[tddba->page_size]; //alloc(tddba->page_size);
		tddba->buffer2 = (pag*) new UCHAR[tddba->page_size]; //alloc(tddba->page_size);
		tddba->global_buffer = (pag*) new UCHAR[tddba->page_size]; //alloc(tddba->page_size);
		tddba->page_number = -1;

		/* gather continuation files */

		SLONG page = HEADER_PAGE;
		
		do {
			if (page != HEADER_PAGE)
				current = db_open(tddba, file_name);
			do {
				header = (const header_page*) tddba->read(page); //db_read(tddba, (SLONG) page);
				
				if (current != tddba->files)
					current->fil_fudge = 1;	/* ignore header page once read it */
					
				*file_name = '\0';
				const UCHAR* vp = header->hdr_data;
				
				for (const UCHAR* const vend = vp + header->hdr_page_size;
					  vp < vend && *vp != HDR_end; vp += 2 + vp[1])
					{
					if (*vp == HDR_file) 
						{
						memcpy(file_name, vp + 2, vp[1]);
						*(file_name + vp[1]) = '\0';
						
#if defined (WIN95) && !defined (SERVICE_THREAD)
						if (!fAnsiCP)
							AnsiToOem(file_name, file_name);
#endif
						}
						
					if (*vp == HDR_last_page) 
						memcpy(&current->fil_max_page, vp + 2, sizeof(current->fil_max_page));
					}
			} while (page = header->hdr_next_page);
			
			page = current->fil_max_page + 1;	/* first page of next file */
		} while (*file_name);

		/* Print header page */

		page = HEADER_PAGE;
		
		do {
			header = (const header_page*) tddba->read(page); //db_read(tddba, (SLONG) page);
			PPG_print_header(header, page, sw_nocreation, sw_outfile);
			page = header->hdr_next_page;
		} while (page);

		if (sw_header)
			//dba_exit(FINI_OK, tddba);
			return FINI_OK;

		/* print continuation file sequence */

		dba_print(tddba, 7, 0, 0, 0, 0, 0);
		// msg 7: \n\nDatabase file sequence: 
		
		for (current = tddba->files; current->fil_next; current = current->fil_next)
			dba_print(tddba, 8, current->fil_string, current->fil_next->fil_string, 0, 0, 0);
			//* msg 8: File %s continues as file %s

		dba_print(tddba, 9, current->fil_string,
			(const TEXT*)((current == tddba->files) ? "only" : "last"), 0, 0, 0);
			// msg 9: File %s is the %s file\n

		// print log page, deprecated.
		/*
		page = LOG_PAGE;
		do {
			const log_info_page* logp = (const log_info_page*) tddba->read((SLONG) page);
			PPG_print_log(logp, page, sw_nocreation, sw_outfile);
			page = logp->log_next_page;
		} while (page);

		if (sw_log)
			dba_exit(FINI_OK, tddba);
		*/

		/* Check to make sure that the user accessing the database is either
		 * SYSDBA or owner of the database */
		
		//Firebird::ClumpletWriter dpb(true, MAX_DPB_SIZE, isc_dpb_version1);
		PBGen dpb(isc_dpb_version1);
		dpb.putParameter(isc_dpb_gstat_attach);

		if (*username) 
			dpb.putParameter(isc_dpb_user_name, username);
			
		if (*password)
			dpb.putParameter(called_as_service ? isc_dpb_password_enc : isc_dpb_password, password);

		isc_attach_database(status_vector, 0, name, &DB, dpb.getLength(), (char*) dpb.buffer);

		if (status_vector[1])
			dba_exit(FINI_ERROR, tddba);

		if (sw_version)
			isc_version(&DB, NULL, NULL);

		isc_tr_handle transact1 = 0;
		START_TRANSACTION transact1 READ_ONLY;
			ON_ERROR
				dba_exit(FINI_ERROR, tddba);
			END_ERROR

		isc_req_handle request1 = 0;
		isc_req_handle request2 = 0;
		isc_req_handle request3 = 0;

		FOR(TRANSACTION_HANDLE transact1 REQUEST_HANDLE request1)
			X IN RDB$RELATIONS SORTED BY DESC X.RDB$RELATION_NAME

			if (!sw_system && X.RDB$SYSTEM_FLAG) 
				continue;
				
			if (!X.RDB$VIEW_BLR.NULL || !X.RDB$EXTERNAL_FILE.NULL)
				continue;
			
			DbaRelation* relation;
			
			if (sw_relation)
				{
				//trimBlanks(X.RDB$RELATION_NAME);
				JString relationName = trim(X.RDB$RELATION_NAME);
				
				for (relation = tddba->relations; relation; relation = relation->rel_next)
					if (!(strcmp(relation->rel_name, relationName))) 
						{
						relation->rel_id = X.RDB$RELATION_ID;
						break;
						}

				if (!relation)
					continue;
				}
			else
				{
				relation = new DbaRelation; //(DbaRelation*) alloc(sizeof(struct DbaRelation));
				relation->rel_next = tddba->relations;
				tddba->relations = relation;
				relation->rel_id = X.RDB$RELATION_ID;
				relation->rel_name = trim(X.RDB$RELATION_NAME);
				//strcpy(relation->rel_name, X.RDB$RELATION_NAME);
				//trimBlanks(relation->rel_name);
				}

			FOR(TRANSACTION_HANDLE transact1 REQUEST_HANDLE request2)
				Y IN RDB$PAGES WITH Y.RDB$RELATION_ID EQ relation->rel_id AND
					Y.RDB$PAGE_SEQUENCE EQ 0 

				if (Y.RDB$PAGE_TYPE == pag_pointer) 
					relation->rel_pointer_page = Y.RDB$PAGE_NUMBER;
					
				if (Y.RDB$PAGE_TYPE == pag_root) 
					relation->rel_index_root = Y.RDB$PAGE_NUMBER;
			END_FOR;
				ON_ERROR
					dba_exit(FINI_ERROR, tddba);
				END_ERROR
			
			if (sw_index)
				{
				FOR(TRANSACTION_HANDLE transact1 REQUEST_HANDLE request3)
					Y IN RDB$INDICES WITH Y.RDB$RELATION_NAME EQ relation->rel_name
						SORTED BY DESC Y.RDB$INDEX_NAME
						
					if (Y.RDB$INDEX_INACTIVE)
						continue;
						
					DbaIndex* index = new DbaIndex; //(DbaIndex*) alloc(sizeof(struct DbaIndex));
					index->idx_next = relation->rel_indexes;
					relation->rel_indexes = index;
					index->idx_name = trim(Y.RDB$INDEX_NAME);
					//strcpy(index->idx_name, Y.RDB$INDEX_NAME);
					//trimBlanks(index->idx_name);
					index->idx_id = Y.RDB$INDEX_ID - 1;
				END_FOR;
					ON_ERROR
						dba_exit(FINI_ERROR, tddba);
					END_ERROR
				}
		END_FOR;
			ON_ERROR
				dba_exit(FINI_ERROR, tddba);
			END_ERROR

		if (request1) 
			isc_release_request(status_vector, &request1);

		if (request2)
			isc_release_request(status_vector, &request2);

		if (request3)
			isc_release_request(status_vector, &request3);

		COMMIT transact1;
			ON_ERROR
				dba_exit(FINI_ERROR, tddba);
			END_ERROR
			
		// FINISH; error!
		
		FINISH
		ON_ERROR
				dba_exit(FINI_ERROR, tddba);
			END_ERROR

		dba_print(tddba, 10, 0, 0, 0, 0, 0);
		// msg 10: \nAnalyzing database pages ...\n 

		{ // scope for MSVC6
		for (DbaRelation* relation = tddba->relations; relation; relation = relation->rel_next)
			{
			if (relation->rel_id == -1) 
				continue;

			if (sw_data)
				analyze_data(tddba, relation, sw_record);

			for (DbaIndex* index = relation->rel_indexes; index; index = index->idx_next)
				analyze_index(tddba, relation, index);
			}
		} // scope for MSVC6

		/* Print results */

		for (const DbaRelation* relation = tddba->relations; relation; relation = relation->rel_next)
			{
			if (relation->rel_id == -1) 
				continue;

			FPRINTF(sw_outfile, "%s (%d)\n", relation->rel_name, relation->rel_id);
			
			if (sw_data)
				{
				dba_print(tddba, 11, (TEXT *)(IPTR) relation->rel_pointer_page,
						(TEXT *)(IPTR) relation->rel_index_root, 0, 0, 0);
				// msg 11: "    Primary pointer page: %ld, Index root page: %ld" 
				
				if (sw_record) 
					{
					double average = (relation->rel_records) ?
						(double) relation->rel_record_space /
						relation->rel_records : 0.0;
					sprintf((char*) buf, "%.2f", average);
					FPRINTF(sw_outfile,
							"    Average record length: %s, total records: %ld\n",
							buf, relation->rel_records);
					// dba_print(tddba, 18, buf, relation->rel_records, 0, 0, 0);
					// msg 18: "    Average record length: %s, total records: %ld 
					average = (relation->rel_versions) ?
						(double) relation->rel_version_space /
						relation->rel_versions : 0.0;
					sprintf((char*) buf, "%.2f", average);
					FPRINTF(sw_outfile,
							"    Average version length: %s, total versions: %ld, max versions: %ld\n",
							buf, relation->rel_versions,
							relation->rel_max_versions);
					// dba_print(tddba, 19, buf, relation->rel_versions, 
					//			 relation->rel_max_versions, 0, 0);
					// msg 19: " Average version length: %s, total versions: %ld, max versions: %ld 
					}

				const double average = (relation->rel_data_pages) ?
					(double) relation->rel_total_space * 100 /
					((double) relation->rel_data_pages *
					(tddba->page_size - DPG_SIZE)) : 0.0;
				sprintf((char*) buf, "%.0f%%", average);
				dba_print(tddba, 12, (TEXT*)(IPTR) relation->rel_data_pages,
						(TEXT*)(IPTR) relation->rel_slots,
						(TEXT*) buf, 0, 0);	/* msg 12: "    Data pages: %ld, data page slots: %ld, average fill: %s */
				dba_print(tddba, 13, 0, 0, 0, 0, 0);	/* msg 13: "    Fill distribution:" */
				print_distribution(tddba, "\t", relation->rel_fill_distribution);
				}
				
			FPRINTF(sw_outfile, "\n");
			
			for (DbaIndex* index = relation->rel_indexes; index; index = index->idx_next)
				{
				dba_print(tddba, 14, (const char*) index->idx_name, (TEXT *)(IPTR) index->idx_id, 0, 0, 0);
				// msg 14: "    Index %s (%d)" 
				dba_print(tddba, 15, (TEXT *)(IPTR) index->idx_depth,
						(TEXT *)(IPTR) index->idx_leaf_buckets,
						(TEXT *)(IPTR) index->idx_nodes, 0, 0);
				// msg 15: \tDepth: %d, leaf buckets: %ld, nodes: %ld 
				const double average = (index->idx_nodes) ?
					index->idx_data_length / index->idx_nodes : 0;
				sprintf((char*) buf, "%.2f", average);
				dba_print(tddba, 16, (TEXT*) buf, (TEXT*)(IPTR) index->idx_total_duplicates,
						(TEXT*)(IPTR) index->idx_max_duplicates, 0, 0);
				// msg 16: \tAverage data length: %s, total dup: %ld, max dup: %ld"
				dba_print(tddba, 17, 0, 0, 0, 0, 0);
				// msg 17: \tFill distribution:
				print_distribution(tddba, "\t    ", index->idx_fill_distribution);
				FPRINTF(sw_outfile, "\n");
				}
			}

		dba_exit(FINI_OK, tddba);
		}
	catch(...)
		{
		FINISH
			ON_ERROR
			END_ERROR;

		throw;
		}

	FINISH
		ON_ERROR
		END_ERROR;
		
	return 0;
}

#ifdef OBSOLETE
static char* alloc(size_t size)
{
/**************************************
 *
 *	a l l o c
 *
 **************************************
 *
 * Functional description
 *	Allocate and zero a piece of memory.
 *
 **************************************/
#ifdef SERVICE_THREAD
	DbaData* tddba = DbaData::getSpecific();
	char* const block = FB_NEW(*getDefaultMemoryPool()) SCHAR[size];
#else
	char* const block = (char*) gds__alloc(size);
#endif
	if (!block) {
		/* NOMEM: return error */
		dba_error(tddba, 31, 0, 0, 0, 0, 0);
	}
/* note: shouldn't we check for the NULL?? */
	char* p = block;
	do {
		*p++ = 0;
	} while (--size);

#ifdef SERVICE_THREAD
	dba_mem* mem_list = FB_NEW(*getDefaultMemoryPool()) dba_mem;
	if (!mem_list) {
		/* NOMEM: return error */
		dba_error(tddba, 31, 0, 0, 0, 0, 0);
	}
	mem_list->memory = block;
	mem_list->mem_next = 0;

	if (tddba->head_of_mem_list == 0)
		tddba->head_of_mem_list = mem_list;
	else {
		mem_list->mem_next = tddba->head_of_mem_list;
		tddba->head_of_mem_list = mem_list;
	}
#endif

	return block;
}
#endif

static void analyze_data(DbaData* tddba, DbaRelation* relation, bool sw_record)
{
/**************************************
 *
 *	a n a l y z e _ d a t a
 *
 **************************************
 *
 * Functional description
 *	Analyze data pages associated with relation.
 *
 **************************************/

	pointer_page* ptr_page = (pointer_page*) tddba->buffer1;

	for (SLONG next_pp = relation->rel_pointer_page; next_pp; next_pp = ptr_page->ppg_next)
		{
		//move((const SCHAR*) db_read(tddba, next_pp), (SCHAR*) ptr_page, tddba->page_size);
		move((const SCHAR*) tddba->read(next_pp), (SCHAR*) ptr_page, tddba->page_size);
		const SLONG* ptr = ptr_page->ppg_page;
		
		for (const SLONG* const end = ptr + ptr_page->ppg_count; ptr < end; ptr++)
			{
			++relation->rel_slots;
			
			if (*ptr) 
				{
				++relation->rel_data_pages;
				
				if (!analyze_data_page(tddba, relation, (const data_page*) tddba->read(*ptr), sw_record))
					dba_print(tddba, 18, (TEXT*)(IPTR) *ptr, 0, 0, 0, 0);
					// msg 18: "    Expected data on page %ld" */
				}
			}
		}
}


static bool analyze_data_page(DbaData* tddba,  DbaRelation* relation, const data_page* page, bool sw_record)
{
/**************************************
 *
 *	a n a l y z e _ d a t a _ p a g e
 *
 **************************************
 *
 * Functional description
 *	Analyze space utilization for data page.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();

	if (page->dpg_header.pag_type != pag_data)
		return false;

	if (sw_record) {
		move((const SCHAR*) page, (SCHAR*) tddba->buffer2, tddba->page_size);
		page = (const data_page*) tddba->buffer2;
	}

	SSHORT space = page->dpg_count * sizeof(data_page::dpg_repeat);

	const data_page::dpg_repeat* tail = page->dpg_rpt;
	
	for (const data_page::dpg_repeat* const end = tail + page->dpg_count; tail < end; tail++)
		{
		if (tail->dpg_offset && tail->dpg_length)
			{
			space += tail->dpg_length;
			
			if (sw_record) 
				{
				const rhdf* header = (const rhdf*) ((SCHAR *) page + tail->dpg_offset);
				
				if (!(header->rhdf_flags & (rhd_blob | rhd_chain | rhd_fragment)))
					{
					++relation->rel_records;
					relation->rel_record_space += tail->dpg_length;
					
					if (header->rhdf_flags & rhd_incomplete) 
						{
						relation->rel_record_space -= RHDF_SIZE;
						relation->rel_record_space +=
							analyze_fragments(tddba, relation, header);
						}
					else
						relation->rel_record_space -= RHD_SIZE;

					if (header->rhdf_b_page)
						relation->rel_version_space +=
							analyze_versions(tddba, relation, header);
					}
				}
			}
		}

	relation->rel_total_space += space;
	SSHORT bucket = (space * BUCKETS) / (tddba->page_size - DPG_SIZE);

	if (bucket == BUCKETS)
		--bucket;

	++relation->rel_fill_distribution[bucket];

	return true;
}


static ULONG analyze_fragments(DbaData* tddba, const DbaRelation* relation, const rhdf* header)
{
/**************************************
 *
 *	a n a l y z e _ f r a g m e n t s
 *
 **************************************
 *
 * Functional description
 *	Analyze space used by a record's fragments.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();
	ULONG space = 0;

	while (header->rhdf_flags & rhd_incomplete) {
		const SLONG f_page = header->rhdf_f_page;
		const USHORT f_line = header->rhdf_f_line;
		const data_page* page = (const data_page*) tddba->read(f_page);
		if (page->dpg_header.pag_type != pag_data ||
			page->dpg_relation != relation->rel_id ||
			page->dpg_count <= f_line)
		{
			break;
		}
		const data_page::dpg_repeat* index = &page->dpg_rpt[f_line];
		if (!index->dpg_offset)
			break;
		space += index->dpg_length;
		space -= RHDF_SIZE;
		header = (const rhdf*) ((SCHAR *) page + index->dpg_offset);
	}

	return space;
}


static void analyze_index(DbaData* tddba,  DbaRelation* relation, DbaIndex* index)
{
/**************************************
 *
 *	a n a l y z e _ i n d e x
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();

	const index_root_page* index_root = 
		(const index_root_page*) tddba->read(relation->rel_index_root);

	SLONG page;
	
	if (index_root->irt_count <= index->idx_id ||
		!(page = index_root->irt_rpt[index->idx_id].irt_root)) 
		return;

	// CVC: The two const_cast's for bucket can go away if BTreeNode's functions
	// are overloaded for constness. They don't modify bucket and pointer's contents.
	
	const btree_page* bucket = (const btree_page*) tddba->read(page);
	index->idx_depth = bucket->btr_level + 1;

	UCHAR* pointer;
	IndexNode node;
	
	while (bucket->btr_level) 
		{
		pointer = BTreeNode::getPointerFirstNode(const_cast<btree_page*>(bucket));
		BTreeNode::readNode(&node, pointer, bucket->btr_header.pag_flags, false);
		bucket = (const btree_page*) tddba->read(node.pageNumber);
		}

	bool firstLeafNode = true;
	SLONG number;
	SLONG duplicates = 0;
	
	// AB: In fact length for KEY should be MAX_KEY (1/4 of used page-size)
	// This value should be kept equal with size declared in btr.h
	//UCHAR key[4096];
	
	//UCHAR* key = (UCHAR*) alloc(tddba->page_size / 4);
	TempSpace tempSpace;
	tempSpace.resize(tddba->page_size / 4);
	UCHAR *key = tempSpace.space;
	USHORT key_length = 0;
	
	while (true)
		{
		++index->idx_leaf_buckets;
		pointer = BTreeNode::getPointerFirstNode(const_cast<btree_page*>(bucket));
		const UCHAR* const firstNode = pointer;
		
		while (true)
			{
			pointer = BTreeNode::readNode(&node, pointer, 
				bucket->btr_header.pag_flags, true);

			if (node.isEndBucket || node.isEndLevel)
				break;

			++index->idx_nodes;
			index->idx_data_length += node.length;
			USHORT l = node.length + node.prefix;
			
			bool dup;
			
			if (node.nodePointer == firstNode) 
				dup = BTreeNode::keyEquality(key_length, key, &node);
			else 
				dup = (!node.length) && (l == key_length);

			if (firstLeafNode)
				{
				dup = false;
				firstLeafNode = false;
				}
				
			if (dup) 
				{
				++index->idx_total_duplicates;
				++duplicates;
				}
			else 
				{
				if (duplicates > index->idx_max_duplicates) 
					index->idx_max_duplicates = duplicates;
				duplicates = 0;
				}

			key_length = l;
			l = node.length;
			
			if (l) 
				{
				UCHAR* p = key + node.prefix;
				const UCHAR* q = node.data;
				do *p++ = *q++; while (--l);
				}
			}

		if (duplicates > index->idx_max_duplicates) 
			index->idx_max_duplicates = duplicates;

		const USHORT header = (USHORT)(firstNode - (UCHAR*) bucket);
		const USHORT space = bucket->btr_length - header;
		USHORT n = (space * BUCKETS) / (tddba->page_size - header);
		
		if (n == BUCKETS)	
			--n;

		++index->idx_fill_distribution[n];

		if (node.isEndLevel)
			break;

		number = page;
		page = bucket->btr_sibling;
		bucket = (const btree_page*) tddba->read(page);
		
		if (bucket->btr_header.pag_type != pag_index) 
			{
			dba_print(tddba, 19, (const TEXT*)(IPTR) page, (const TEXT*)(IPTR) number, 0, 0, 0);
			// mag 19: "    Expected b-tree bucket on page %ld from %ld"
			break;
			}
		}
}


static ULONG analyze_versions(DbaData* tddba,  DbaRelation* relation, const rhdf* header)
{
/**************************************
 *
 *	a n a l y z e _ v e r s i o n s
 *
 **************************************
 *
 * Functional description
 *	Analyze space used by a record's back versions.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();
	ULONG space = 0, versions = 0;
	SLONG b_page = header->rhdf_b_page;
	USHORT b_line = header->rhdf_b_line;

	while (b_page) 
		{
		const data_page* page = (const data_page*) tddba->read(b_page);
		
		if (page->dpg_header.pag_type != pag_data ||
			page->dpg_relation != relation->rel_id ||
			page->dpg_count <= b_line)
			break;

		const data_page::dpg_repeat* index = &page->dpg_rpt[b_line];
		
		if (!index->dpg_offset)
			break;
			
		space += index->dpg_length;
		++relation->rel_versions;
		++versions;
		header = (const rhdf*) ((SCHAR *) page + index->dpg_offset);
		b_page = header->rhdf_b_page;
		b_line = header->rhdf_b_line;
		
		if (header->rhdf_flags & rhd_incomplete) 
			{
			space -= RHDF_SIZE;
			space += analyze_fragments(tddba,  relation, header);
			}
		else
			space -= RHD_SIZE;
		}

	if (versions > relation->rel_max_versions)
		relation->rel_max_versions = versions;

	return space;
}


#ifdef WIN_NT

static void db_error(DbaData* tddba,  SLONG status)
{
/**************************************
 *
 *	d b _ e r r o r		( W I N _ N T )
 *
 **************************************
 *
 * Functional description
 *
 **************************************/
	TEXT s[128];

	tddba->page_number = -1;
	StatusPrint::getOSText(isc_arg_win32, status, sizeof(s), s);
	FPRINTF(tddba->sw_outfile, "%s\n", s);
	dba_exit(FINI_ERROR, tddba);
}
#endif // WIN_NT

#ifdef OBSOLETE
static const pag* db_read(DbaData* tddba, SLONG page_number)
{
/**************************************
 *
 *	d b _ r e a d		( W I N _ N T )
 *
 **************************************
 *
 * Functional description
 *	Read a database page.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();

	if (tddba->page_number == page_number)
		return tddba->global_buffer;

	tddba->page_number = page_number;

	DbaFile* file;
	for (file = tddba->files; page_number > (SLONG) file->fil_max_page
							 && file->fil_next;) 
	{
		 file = file->fil_next;
	}

	page_number -= file->fil_min_page - file->fil_fudge;

	LARGE_INTEGER liOffset;
	liOffset.QuadPart =
		UInt32x32To64((DWORD) page_number, (DWORD) tddba->page_size);
	if (SetFilePointer
		(file->fil_desc, (LONG) liOffset.LowPart, &liOffset.HighPart,
		 FILE_BEGIN) == (DWORD) -1)
	{
#ifdef SERVICE_THREAD
		CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
								GSTAT_MSG_FAC, 30,
								0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
		// msg 30: Can't read a database page 
#endif
		db_error(tddba, GetLastError());
	}

	SLONG actual_length;
	if (!ReadFile(	file->fil_desc,
					tddba->global_buffer,
					tddba->page_size,
					reinterpret_cast<LPDWORD>(&actual_length),
					NULL))
	{
#ifdef SERVICE_THREAD
		CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
								GSTAT_MSG_FAC, 30,
								0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
		// msg 30: Can't read a database page 
#endif
		db_error(tddba, GetLastError());
	}
	if (actual_length != tddba->page_size) {
#ifdef SERVICE_THREAD
		CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
								GSTAT_MSG_FAC, 4,
								0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
#endif
		dba_error(tddba, 4, 0, 0, 0, 0, 0);
		// msg 4: Unexpected end of database file. 
	}

	return tddba->global_buffer;
}
#endif // OBSOLETE


#ifndef WIN_NT

static void db_error(DbaData* tddba, int status)
{
/**************************************
 *
 *	d b _ e r r o r
 *
 **************************************
 *
 * Functional description
 *
 **************************************/

	tddba->page_number = -1;
	TEXT s[128];
	StatusPrint::getOSText(isc_arg_unix, status, sizeof(s), s);
	FPRINTF(tddba->sw_outfile, "%s\n", s);
	dba_exit(FINI_ERROR, tddba);
}
#endif // !WIN_NT

// CVC: This function was using cast to char* for the first param always
// and the callers had to cast their char*'s to UCHAR*, too. Since the
// real parameter is char* and always the usage is char*, I changed signature.

static DbaFile* db_open(DbaData* tddba, const char* file_name)
{
/**************************************
 *
 *	d b _ o p e n
 *
 **************************************
 *
 * Functional description
 *	Open a database file.
 *      Put the file on an ordered list.
 *
 **************************************/

	DbaFile* file = tddba->addFile(file_name);
	file->open();

	/***
	catch (OSRIException& exception)
		{
#ifdef SERVICE_THREAD
		CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
								GSTAT_MSG_FAC, 29,
								isc_arg_string, file_name,
								0, NULL, 0, NULL, 0, NULL, 0, NULL);
		// msg 29: Can't open database file %s 
#endif
		db_error(tddba, error);
		}
	***/
	
	return file;
}

#ifdef OBSOLETE
static const pag* db_read(DbaData* tddba, SLONG page_number)
{
/**************************************
 *
 *	d b _ r e a d
 *
 **************************************
 *
 * Functional description
 *	Read a database page.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();

	if (tddba->page_number == page_number)
		return tddba->global_buffer;

	tddba->page_number = page_number;

	DbaFile* file;
	
	for (file = tddba->files; page_number > (SLONG) file->fil_max_page && file->fil_next;) 
		file = file->fil_next;

	page_number -= file->fil_min_page - file->fil_fudge;
	const UINT64 offset = ((UINT64)page_number) * ((UINT64)tddba->page_size);
	
	if (lseek (file->fil_desc, offset, 0) == -1) 
		{
#ifdef SERVICE_THREAD
		CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
								GSTAT_MSG_FAC, 30,
								0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
		// msg 30: Can't read a database page 
#endif
		db_error(tddba, errno);
		}

	SSHORT length = tddba->page_size;
	
	for (SCHAR* p = (SCHAR *) tddba->global_buffer; length > 0;)
		{
		const SSHORT l = read(file->fil_desc, p, length);
		
		if (l < 0) 
			{
#ifdef SERVICE_THREAD
			CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
									GSTAT_MSG_FAC, 30,
									0, NULL, 0, NULL, 0, NULL, 0, NULL, 0, NULL);
			// msg 30: Can't read a database page 
#endif
			db_error(tddba, errno);
			}
			
		if (!l) 
			{
#ifdef SERVICE_THREAD
			CMD_UTIL_put_svc_status(tddba->dba_service_blk->svc_status,
									GSTAT_MSG_FAC, 4,
									0, NULL,
									0, NULL, 0, NULL, 0, NULL, 0, NULL);
#endif
			dba_error(tddba, 4, 0, 0, 0, 0, 0);
			// msg 4: Unexpected end of database file. 
			}
			
		p += l;
		length -= l;
		}

	return tddba->global_buffer;
}
#endif //OBSOLETE


static void dba_error(DbaData* tddba, 
					  USHORT errcode,
					  const TEXT* arg1,
					  const TEXT* arg2, const TEXT* arg3,
					  const TEXT* arg4, const TEXT* arg5)
{
/**************************************
 *
 *	d b a _ e r r o r
 *
 **************************************
 *
 * Functional description
 *	Format and print an error message, then punt.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();
	tddba->page_number = -1;

	dba_print(tddba, errcode, arg1, arg2, arg3, arg4, arg5);
	dba_exit(FINI_ERROR, tddba);
}


static void dba_print(DbaData* tddba, 
					  USHORT number,
					  const TEXT* arg1,
					  const TEXT* arg2, const TEXT* arg3,
					  const TEXT* arg4, const TEXT* arg5)
{
/**************************************
 *
 *	d b a _ p r i n t
 *
 **************************************
 *
 * Functional description
 *      Retrieve a message from the error file, format it, and print it.
 *
 **************************************/
	TEXT buffer[256];
	//DbaData* tddba = DbaData::getSpecific();

	gds__msg_format(NULL, GSTAT_MSG_FAC, number, sizeof(buffer), buffer,
					arg1, arg2, arg3, arg4, arg5);
	TRANSLATE_CP(buffer);
	FPRINTF(tddba->sw_outfile, "%s\n", buffer);
}


static void move(const SCHAR* from, SCHAR* to, SSHORT length)
{
/**************************************
 *
 *	m o v e
 *
 **************************************
 *
 * Functional description
 *	Move some stuff.
 *
 **************************************/

	memcpy(to, from, (int) length);
}


static void print_distribution(DbaData* tddba, const SCHAR* prefix, const SLONG* vector)
{
/**************************************
 *
 *	p r i n t _ d i s t r i b u t i o n
 *
 **************************************
 *
 * Functional description
 *	Print distribution as percentages.
 *
 **************************************/
	//DbaData* tddba = DbaData::getSpecific();

	for (SSHORT n = 0; n < BUCKETS; n++) 
		{
		FPRINTF(tddba->sw_outfile, "%s%2d - %2d%% = %ld\n",
				prefix,
				n * 100 / BUCKETS, (n + 1) * 100 / BUCKETS - 1, vector[n]);
		}
}


static JString trim(const char *string)
{
/**************************************
 *
 *	t r i m 
 *
 **************************************
 *
 * Functional description
 *		Trim trailing blanks from a string.
 *
 **************************************/

	const char *blank = NULL;
	
	for (const char *p = string; *p; ++p)
		if (*p != ' ')
			blank = NULL;
		else if (!blank)
			blank = p;
	
	if (blank)
		return JString(string, blank - string);
	
	return string;
}

static JString resolveDatabase(const char *databaseName)
{
/**************************************
 *
 *	r e s o l v e D a t a b a s e
 *
 **************************************
 *
 * Functional description
 *		Resolve database name from configuration system.
 *
 **************************************/
 
	JString dbName = databaseName;
	JString prior;
	
	for (int iteration = 0; iteration < 10; ++iteration)
		{
		ConfObject *confObject;
		confObject = Configuration::findObject ("database", dbName);
		
		if (!confObject)
			return dbName;
		
		prior = dbName;
		dbName = confObject->getValue ("filename", (const char*) dbName);
		
		if (dbName == prior)
			break;
			
		JString providerName = confObject->getValue (0, "provider");
		
		if (!providerName.IsEmpty())
			break;
		}
	
	return dbName;
 }
